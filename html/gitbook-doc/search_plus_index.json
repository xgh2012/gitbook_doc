{"./":{"url":"./","title":"GitBook简介","keywords":"","body":"1. GitBook简介1. GitBook简介 GitBook是一款文档编辑工具。它的功能类似金山WPS中的Word或者微软Office中的Word的文档编辑工具。它可以用来写文档、建表格、插图片、生成pdf。 当然，以上的功能WPS、Office可能做得更好，但是，GitBook还有更最强大的功能：它可以用文档建立一个网站，让更多人了解你写的书，另外，最最核心的是，他支持Git，也就意味着，它是一个分布式的文档编辑工具。 你可以随时随地来编写你的文档，也可以多人共同编写文档，哪怕多人编写同一页文档，它也能记录每个人的内容，然后告诉你他们之间的区别，也能记录你的每一次改动，你可以查看每一次的书写记录和变化，哪怕你将文档都删除了，它也能找回来！ 这就是它继承Git后的厉害之处！ 效果预览图： PS： 以上文档摘抄自官方在线文档：http://gitbook.hushuang.me/ebook.html 本文档只针对如何搭建本地环境、自动更新在线文档做一个简单介绍 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo.html":{"url":"zhun-bei-gong-zuo.html","title":"一、准备工作","keywords":"","body":"©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo/ruan-jian.html":{"url":"zhun-bei-gong-zuo/ruan-jian.html","title":"1.1 软件列表","keywords":"","body":"1. 软件列表1. 软件列表 Git：版本管理软件，gitbook必须通过git提交到版本库 Node.js：gitbook-cli依赖node.js环境，如果不需要在本地运行查看效果，可不安装（建议安装） GitBook.Editor：熟悉Markdown语法，可使用其他编辑器处理如：vscode、Typora等，也可使用在线Markdown工具编辑 TortoiseGit:git图形管理界面（熟悉git命令或使用其他软件可忽略） 测试 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo/gitan-zhuang.html":{"url":"zhun-bei-gong-zuo/gitan-zhuang.html","title":"1.2 Git安装与配置","keywords":"","body":"1. Git安装与配置1.1. Git是什么？1.2. 下载地址1.3. 相关知识1.4. Git安装1.5. Git配置1. Git安装与配置 1.1. Git是什么？ Git是目前世界上最先进的分布式版本控制系统（没有之一）。 1.2. 下载地址 下载地址：https://git-scm.com/download/ 选择合适版本下载 1.3. 相关知识 Git相关知识可参考在线文档：https://git-scm.com/book/zh/v2 1.4. Git安装 1、双击安装文件 2、next->next->finish 安装完成 3、在桌面右键，菜单里出现如图所示 Git GUI 和Git Bash，表示安装成功 1.5. Git配置 1、在桌面右键，打开Git Bash Here，打开git终端 2、配置用户信息 依次配置邮箱地址和用户名，执行如下命令： git config --global user.email \"xxxx@email.com\" git config --global user.name \"xxxxxx\" 更改用户名（不要使用汉字） 和 邮箱地址 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo/nodejs-an-zhuang-yu-pei-zhi.html":{"url":"zhun-bei-gong-zuo/nodejs-an-zhuang-yu-pei-zhi.html","title":"1.3 Node.js 安装与配置","keywords":"","body":"1. Node.js安装与配置1.1. Node.js是什么？1.2. 下载地址1.3. 安装1. Node.js安装与配置 1.1. Node.js是什么？ 简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。 1.2. 下载地址 下载地址：https://nodejs.org/zh-cn/download/，选择系统合适版本下载 1.3. 安装 1、双击安装文件 2、next->next->finish 安装完成 3、检查配置，出现下图所示，表示安装成功 node -v npm -v 4、如果提示 command not found ，可能是环境变量不包含node.js的文件夹 在环境变量PATH中添加目录：刚才安装node.js的目录（windows环境变量配置 参考地址，mac环境变量配置 参考地址） ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo/gitbookan-zhuang-yu-pei-zhi.html":{"url":"zhun-bei-gong-zuo/gitbookan-zhuang-yu-pei-zhi.html","title":"1.4 GitBook安装与配置","keywords":"","body":"1. GitBook安装与配置2. GitBook安装1. GitBook安装与配置 2. GitBook安装 GitBook是一个基于Node.js的命令行工具，所以使用npm方式进行安装 打开git终端输入命令：-g 表示全局安装，mac下可能需要使用sudo npm install gitbook-cli -g #查看是否安装成功 gitbook -V #出现以下提示，表示成功 CLI version: 2.3.2 GitBook version: 3.2.3 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"zhun-bei-gong-zuo/gitbookeditoran-zhuang-yu-pei-zhi.html":{"url":"zhun-bei-gong-zuo/gitbookeditoran-zhuang-yu-pei-zhi.html","title":"1.5 GitBook.Editor安装与配置","keywords":"","body":"1. GitBook.Editor安装与配置1.1. 下载地址1.2. 安装1. GitBook.Editor安装与配置 1.1. 下载地址 官方新版本GitBook不再有桌面编辑器，但我们可以使用原来的编辑器 windows备用下载链接：https://pan.baidu.com/s/1nX6FRtyzvdNXj8ijaVIfng 提取码：3b7w Mac备用下载地址： http://www.pc6.com/mac/238113.html 1.2. 安装 1、双击安装文件 提示安装 .net4.5 安装完成 2、因本软件 不再维护，无法登陆，只能选择 Do that later ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"wen-dang-bian-ji.html":{"url":"wen-dang-bian-ji.html","title":"二、文档编辑","keywords":"","body":"©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"wen-dang-geng-xin-liu-cheng.html":{"url":"wen-dang-geng-xin-liu-cheng.html","title":"2.1 文档更新流程","keywords":"","body":"1. 在线文档更新要点：1. 在线文档更新要点： 从仓库更新最新代码； 本地编辑文档； 本地预览效果； 提交文档到仓库，服务器自动更新。 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"wen-dang-geng-xin-liu-cheng/xin-zeng-xiang-mu.html":{"url":"wen-dang-geng-xin-liu-cheng/xin-zeng-xiang-mu.html","title":"2.1.1 新项目添加","keywords":"","body":"1. 新项目创建流程1.1. 流程图1.2. 要点1. 新项目创建流程 1.1. 流程图 如下： 1.2. 要点 需要运维在gitbook目录下创建一个对应git仓库； 本地使用git clone该库后，将 init.zip 文件解压到该库的根目录下，进行初始化； 运维需要先部署自动更新代码功能； 编辑完成后需要使用git 推送到git库，完成自动更新。 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"wen-dang-geng-xin-liu-cheng/lao-xiang-mu.html":{"url":"wen-dang-geng-xin-liu-cheng/lao-xiang-mu.html","title":"2.1.2 老项目更新","keywords":"","body":"1. 老项目更新流程1.1. 流程图1. 老项目更新流程 1.1. 流程图 如下： 要点 编辑前，一定要使用git拉取服务器最新代码； 其他要点与新项目一致。 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"dao-ru-wen-dang.html":{"url":"dao-ru-wen-dang.html","title":"2.2 导入项目","keywords":"","body":"1. 导入文档1.1. 新建目录，C:\\gitbook1.2. 打开Git终端1.3. 克隆仓库1.4. 完成导入1.5. 新仓库建立额外操作1. 导入文档 1.1. 新建目录，C:\\gitbook 1.2. 打开Git终端 进入目录，右键点击Git Bash Here，打开git终端 1.3. 克隆仓库 终端内输入命令： git clone ssh://git@203.195.164.167/home/code/gitbook-doc.git git clone 是复制命令，ssh后是具体项目的仓库地址 第一次连接服务器，输入yes 输入密码：密码不可见，直接输完后回车 1.4. 完成导入 1.5. 新仓库建立额外操作 通知运维新建git库操作略 完成导入后为空 拷贝init.zip到根目录并解压 终端中依次输入以下命令 #添加所有文件到版本管理中 git add . #提交到本地版本库中 git commit -m \"初始化XX项目文档\" #推送到git服务器 git push 附件： 初始化文件 （右键新窗口打开） init.zip ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"da-kai-wen-dang.html":{"url":"da-kai-wen-dang.html","title":"2.3 打开项目","keywords":"","body":"1. 编辑文档1.1. 从服务器更新最新版本文件1.2. 使用GitBook Editor打开项目1. 编辑文档 1.1. 从服务器更新最新版本文件 进入项目文档所在文件夹，打开Git终端，使用命令 git pull 拉取最新版本文档 1.2. 使用GitBook Editor打开项目 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:34:01 "},"bian-ji-wen-dang.html":{"url":"bian-ji-wen-dang.html","title":"2.4 编辑文档","keywords":"","body":"1. 编辑文档1.1. 1、目录操作1.2. 2、其他操作1.3. 3、在线Markdown编辑器1. 编辑文档 1.1. 1、目录操作 Add an article 按钮：新增一级目录 任意目录右键，可增、删、改 因本软件对目录操作体验不是很好，如果需要调整已经设置好的目录顺序，可以通过直接修改目录文件（SUMMARY.md）方式处理 比如 标题3 菜单： 可以将此菜单拷贝到任何节点，使用tab键降低其等级，使用shift+tab键升高其等级。 最终效果如下： 1.2. 2、其他操作 2.1 设置文本菜单级别 2.2 设置无序列表、有序列表、任务列表 2.3 引入代码块 <> 右侧可选择代码所属语言 1.3. 3、在线Markdown编辑器 使用其他在线Markdown编辑器，编辑完成后，直接将Markdown结果复制到当前文件中： 内部使用在线文档系统： http://192.168.171.165:8182/docs/common/common-1c906obtjiv9c 用户名：common 密码：rwy123567 3.1 查看当前编辑文档对应的md文件 3.2 使用编辑器打开项目根目录下 SUMMARY.md 文件 3.3 在线编辑的输入完成，全选然后复制 3.4 找到对应的md文件，使用文本编辑器打开，粘贴完成。 3.5 在gitbook editor 中选择同步（Sync），并保存。 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"xiang-mu-yu-lan.html":{"url":"xiang-mu-yu-lan.html","title":"2.5 项目预览","keywords":"","body":"1. 项目本地预览1. 项目本地预览 本地编辑完成后，可以使用nodejs下gitbook在本地运行一个server 1、进入项目根目录，打开git终端 2、本地编译+启动服务 #本地第一次必须进行运行install命令安装依赖包（如果book.json文件中插件有变动，也必须先运行install） gitbook install #开启本地服务 gitbook serve 3、浏览器中输入 http://localhost:4000 查看效果 4、理论上是热加载，文档有变动，自动重新编译（大概率无法自动编译，每次预览都需要使用命令 gitbook serve 重启服务） ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"fa-bu-wen-dang.html":{"url":"fa-bu-wen-dang.html","title":"2.6 发布文档","keywords":"","body":"1. 发布文档1.1. 提交到git服务器1.2. 脚本自动触发更新 （运维部署）1.3. 完成1. 发布文档 1.1. 提交到git服务器 GitBook Editor 文档保存后 默认自动提交到本地git库，但不支持ssh协议提交，所以需要进入项目根目录，使用git终端提交。 终端中输入以下命令： #推送到git服务器 git push 1.2. 脚本自动触发更新 （运维部署） 1.3. 完成 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:34:01 "},"fu-wu-duan-bu-shu-wen-dang.html":{"url":"fu-wu-duan-bu-shu-wen-dang.html","title":"2.7 服务端部署文档","keywords":"","body":"1. GitBook部署及自动更新1.1. 安装git1.2. 安装node.js1.3. 安装gitbook客户端1.4. Nginx配置项目1.5. 部署自动更新脚本1.6. 新项目创建流程1. GitBook部署及自动更新 1.1. 安装git yum install git 1.2. 安装node.js 下载页面https://nodejs.org/en/download/中找到下载地址 下载：wget https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz 解压包： xz -d node-v12.18.2-linux-x64.tar.xz tar -xf node-v12.18.2-linux-x64.tar.xz 部署bin文件 ln -s ~/node-v12.18.2-linux-x64/bin/node /usr/bin/node ln -s ~/node-v12.18.2-linux-x64/bin/npm /usr/bin/npm ln -s ~/node-v12.18.2-linux-x64/bin/npx /usr/bin/npx 2、3步骤可能提示软连接已存在，先删除执行 1.3. 安装gitbook客户端 (1)npm install -g gitbook-cli (2)ln -s ~/node-v12.18.2-linux-x64/bin/gitbook /usr/bin/gitbook 1.4. Nginx配置项目 server { listen 80; server_name test.com; root /usr/share/nginx/html; #access_log /opt/log/access.log; #error_log /opt/log/error.log; location / { root /opt/gitbook页面根目录/html; index index.html; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } 1.5. 部署自动更新脚本 #!/bin/bash #根据git版本号，进行比较自动执行编译脚本 cd /opt/gitbook代码存放跟目录 dir=$(ls -l |awk '/^d/ {print $NF}') for name in $dir do cd $name old_version=`cat version.file | sort -rV | head -n 1` new_version=$old_version # 执行git命令 git pull origin master for var in `git rev-parse HEAD`; do new_version=$var echo $var > version.file done if [ \"$new_version\"x != \"$old_version\"x ] ;then gitbook install; gitbook build . /opt/gitbook页面根目录/html/$name; echo $name \" rebuild,git_log version:\" $new_version; fi cd .. done 1.6. 新项目创建流程 通知运维创建项目仓库 运维在文档服务器上clone 新建的仓库到根目录：/opt/gitbook代码存放跟目录 编辑人员自己初始化项目，并上传 注： 根据项目仓库名称，自动可以访问，如名称为 lgjapp.git，即初始化完成后，通过地址可以直接访问：http://help.topfreeweb.net/lgjapp/ ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:34:01 "},"muban.html":{"url":"muban.html","title":"三、文档模板","keywords":"","body":"©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"muban/nomal.html":{"url":"muban/nomal.html","title":"3.1 普通模板","keywords":"","body":"1. MinDoc 简介2. 安装与使用2.1. Linux 下后台运行2.2. Windows 下后台运行2.3. 密码找回功能3. 使用Docker部署4. 项目截图5. 使用的技术6. 主要功能7. 参与开发8. 关于作者1. MinDoc 简介 MinDoc 是一款针对IT团队开发的简单好用的文档管理系统。 MinDoc 的前身是 SmartWiki 文档系统。SmartWiki 是基于 PHP 框架 laravel 开发的一款文档管理系统。因 PHP 的部署对普通用户来说太复杂，所以改用 Golang 开发。可以方便用户部署和实用。 开发缘起是公司IT部门需要一款简单实用的项目接口文档管理和分享的系统。其功能和界面源于 kancloud 。 可以用来储存日常接口文档，数据库字典，手册说明等文档。内置项目管理，用户管理，权限管理等功能，能够满足大部分中小团队的文档管理需求。 演示站点： http://doc.iminho.me 2. 安装与使用 如果你的服务器上没有安装golang程序请手动设置一个环境变量如下：键名为 ZONEINFO，值为MinDoc跟目录下的/lib/time/zoneinfo.zip 。 Windows 教程: https://github.com/lifei6671/mindoc/blob/master/README_WIN.md Linux 教程:  https://github.com/lifei6671/mindoc/blob/master/README_LINUX.md PDF 导出配置教程  https://github.com/lifei6671/mindoc/blob/master/docs/README_LINUX.md 对于没有Golang使用经验的用户，可以从 https://github.com/lifei6671/mindoc/releases 这里下载编译完的程序。 如果有Golang开发经验，建议通过编译安装。 git clone https://github.com/lifei6671/mindoc.git go get -d ./... go build -ldflags \"-w\" MinDoc 使用MySQL储存数据，且编码必须是utf8mb4_general_ci。请在安装前，把数据库配置填充到项目目录下的 conf/app.conf 中。 如果conf目录下不存在 app.conf 请重命名 app.conf.example 为 app.conf。 如果 MinDoc 根目录下存在 install.lock 文件表示已经初始化过数据库，想要重新初始化数据库，只需要删除该文件重新启动程序即可。 默认程序会自动创建表，同时初始化一个超级管理员用户：admin 密码：123456 。请登录后重新设置密码。 2.1. Linux 下后台运行 在 Linux 如果想让程序后台运行可以执行如下命令： #使程序后台运行 nohup ./godoc &amp; 该命令会使程序后台执行，但是服务器重启后不会自动启动服务。 使用 supervisor 做服务，可以使服务器重启后自动重启 MinDoc。 2.2. Windows 下后台运行 Windows 下后台运行需要借助 CMD 命令行命令： #在MinDoc跟目录下新建一个slave.vbs文件： Set ws = CreateObject(\"Wscript.Shell\") ws.run \"cmd /c start.bat\",vbhide #再建一个start.bat文件： @echo off godoc_windows_amd64.exe 启动时双击slave.vbs即可，等待程序初始化完数据库会在该目录下创建一个install.lock文件，标识已安装成功。 如果是自己编译，可以用以下命令即可编译出不依赖cmd命令的后台运行的程序： go build -ldflags \"-H=windowsgui\" 通过该命令编译的Golang程序在Windows上默认后台运行。 请将将 MinDoc 加入开机启动列表，使程序开机启动。 2.3. 密码找回功能 密码找回功能依赖邮件服务，因此，需要配置邮件服务才能使用该功能,该配置位于 conf/app.conf 中： #邮件配置 #是否启用邮件 enable_mail=true #smtp服务器的账号 smtp_user_name=admin@iminho.me #smtp服务器的地址 smtp_host=smtp.ym.163.com #密码 smtp_password=1q2w3e__ABC #端口号 smtp_port=25 #邮件发送人的地址 form_user_name=admin@iminho.me #邮件有效期30分钟 mail_expired=30 3. 使用Docker部署 如果是Docker用户，可参考项目内置的Dockerfile文件编译镜像。 在启动镜像时需要提供如下的环境变量： MYSQL_PORT_3306_TCP_ADDR MySQL地址 MYSQL_PORT_3306_TCP_PORT MySQL端口号 MYSQL_INSTANCE_NAME MySQL数据库名称 MYSQL_USERNAME MySQL账号 MYSQL_PASSWORD MySQL密码 HTTP_PORT 程序监听的端口号 举个栗子 docker run -p 8181:8181 -e MYSQL_PORT_3306_TCP_ADDR=127.0.0.1 -e MYSQL_PORT_3306_TCP_PORT=3306 -e MYSQL_INSTANCE_NAME=mindoc_db -e MYSQL_USERNAME=root -e MYSQL_PASSWORD=123456 -e httpport=8181 -d daocloud.io/lifei6671/mindoc:latest 4. 项目截图 创建项目 项目列表 项目概述 项目成员 项目设置 基于Editor.md开发的Markdown编辑器 基于wangEditor开发的富文本编辑器 项目预览 超级管理员后台 5. 使用的技术 beego 1.8.1 mysql 5.6 editor.md bootstrap 3.2 jquery 库 layer 弹出层框架 webuploader 文件上传框架 Nprogress 库 jstree 树状结构库 font awesome 字体库 cropper 图片剪裁库 layer 弹出层框架 highlight 代码高亮库 to-markdown HTML转Markdown库 wangEditor 富文本编辑器 6. 主要功能 项目管理，可以对项目进行编辑更改，成员添加等。 文档管理，添加和删除文档等。 评论管理，可以管理文档评论和自己发布的评论。 用户管理，添加和禁用用户，个人资料更改等。 用户权限管理 ， 实现用户角色的变更。 项目加密，可以设置项目公开状态，私有项目需要通过Token访问。 站点配置，可开启匿名访问、验证码等。 7. 参与开发 我们欢迎您在 MinDoc 项目的 GitHub 上报告 issue 或者 pull request。 如果您还不熟悉GitHub的Fork and Pull开发模式，您可以阅读GitHub的文档（https://help.github.com/articles/using-pull-requests） 获得更多的信息。 8. 关于作者 一个不纯粹的PHPer，一个不自由的 gopher 。 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"muban/database.html":{"url":"muban/database.html","title":"3.2 数据字典","keywords":"","body":"1.1.1. 数据库字典1.1.1. 数据库字典 用户表，储存用户信息 字段 类型 空 默认 注释 uid int(10) 否 username varchar(20) 否 用户名 password varchar(50) 否 密码 name varchar(15) 是 昵称 reg_time int(11) 否 0 注册时间 备注：无 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "},"muban/api.html":{"url":"muban/api.html","title":"3.3 API模板","keywords":"","body":"简要描述： 用户登录接口 接口版本： 版本号 制定人 制定日期 修订日期 2.1.0 张三 2017-03-20 xxxx-xx-xx 请求URL: http://xx.com/api/login 请求方式： GET POST 请求头： 参数名 是否必须 类型 说明 Content-Type 是 string 请求类型： application/json Content-MD5 是 string 请求内容签名 请求参数: 参数名 是否必须 类型 说明 username 是 string 用户名 password 是 string 密码 返回示例: 正确时返回: { \"errcode\": 0, \"data\": { \"uid\": \"1\", \"account\": \"admin\", \"nickname\": \"Minho\", \"group_level\": 0 , \"create_time\": \"1436864169\", \"last_login_time\": \"0\", } } 错误时返回: { \"errcode\": 500, \"errmsg\": \"invalid appid\" } 返回参数说明: 参数名 类型 说明 group_level int 用户组id，1：超级管理员；2：普通用户 备注: 更多返回错误代码请看首页的错误代码描述 ©Xgh2012 all right reserved，powered by Gitbook最后修订时间： 2020-07-29 10:14:05 "}}